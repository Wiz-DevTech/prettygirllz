package com.productcatalog.integration;

import com.productcatalog.model.Product;
import com.productcatalog.model.SKU;
import com.productcatalog.repository.ProductRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

/**
 * # Integration tests for ProductRepository
 */
@DataJpaTest
@Testcontainers
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
public class ProductRepositoryIT {

    @Container
    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:14")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");

    @DynamicPropertySource
    static void setProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
    }

    @Autowired
    private ProductRepository productRepository;

    @Test
    public void testSaveProduct() {
        // Create a product
        Product product = new Product();
        product.setName("Test Product");
        product.setDescription("Description");
        product.setCategory("CANDY");
        product.setActive(true);

        // Save product
        Product savedProduct = productRepository.save(product);

        // Assertions
        assertNotNull(savedProduct.getId());
        assertEquals("Test Product", savedProduct.getName());
        assertEquals("CANDY", savedProduct.getCategory());
    }

    @Test
    public void testFindByCategory() {
        // Create products
        Product product1 = new Product();
        product1.setName("Candy Bar");
        product1.setCategory("CANDY");
        product1.setActive(true);

        Product product2 = new Product();
        product2.setName("T-Shirt");
        product2.setCategory("FASHION");
        product2.setActive(true);

        productRepository.saveAll(List.of(product1, product2));

        // Find by category
        List<Product> candyProducts = productRepository.findByCategory("CANDY");

        // Assertions
        assertEquals(1, candyProducts.size());
        assertEquals("Candy Bar", candyProducts.get(0).getName());
    }

    @Test
    public void testFindByNameContainingIgnoreCase() {
        // Create products
        Product product1 = new Product();
        product1.setName("Chocolate Bar");
        product1.setCategory("CANDY");
        product1.setActive(true);

        Product product2 = new Product();
        product2.setName("Choco Cookies");
        product2.setCategory("CANDY");
        product2.setActive(true);

        Product product3 = new Product();
        product3.setName("T-Shirt");
        product3.setCategory("FASHION");
        product3.setActive(true);

        productRepository.saveAll(List.of(product1, product2, product3));

        // Search by name
        List<Product> chocoProducts = productRepository.findByNameContainingIgnoreCase("choco");

        // Assertions
        assertEquals(2, chocoProducts.size());
    }

    @Test
    public void testFindByIdWithSkus() {
        // Create product with SKU
        Product product = new Product();
        product.setName("Test Product");
        product.setCategory("CANDY");
        product.setActive(true);

        // Save product
        Product savedProduct = productRepository.save(product);

        // Add SKU to product
        SKU sku = new SKU();
        sku.setSkuCode("AB123456");
        sku.setPrice(new BigDecimal("19.99"));
        sku.setAvailableQuantity(10);
        sku.setProduct(savedProduct);

        // Find with SKUs
        Optional<Product> foundProduct = productRepository.findByIdWithSkus(savedProduct.getId());

        // Assertions
        assertTrue(foundProduct.isPresent());
        assertEquals(savedProduct.getId(), foundProduct.get().getId());
        // Note: For this to work correctly in a real test, you would need a SKURepository to save the SKU
    }
}