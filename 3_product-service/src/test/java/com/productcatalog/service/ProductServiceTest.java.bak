package com.productcatalog.service;

import com.productcatalog.exception.InvalidSKUException;
import com.productcatalog.model.Product;
import com.productcatalog.model.SKU;
import com.productcatalog.repository.ProductRepository;
import com.productcatalog.service.impl.ProductServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

/**
 * # Unit tests for ProductService
 */
@ExtendWith(MockitoExtension.class)
public class ProductServiceTest {

    @Mock
    private ProductRepository productRepository;

    @InjectMocks
    private ProductServiceImpl productService;

    private Product product;
    private SKU sku;

    @BeforeEach
    public void setup() {
        product = new Product();
        product.setId(1L);
        product.setName("Test Product");
        product.setCategory("CANDY");

        sku = new SKU();
        sku.setId(1L);
        sku.setSkuCode("AB123456");
        sku.setPrice(new BigDecimal("19.99"));
        sku.setAvailableQuantity(10);
    }

    @Test
    public void testCreateProduct() {
        when(productRepository.save(any(Product.class))).thenReturn(product);

        Product savedProduct = productService.createProduct(product);

        assertNotNull(savedProduct);
        assertEquals("Test Product", savedProduct.getName());
        verify(productRepository, times(1)).save(product);
    }

    @Test
    public void testCreateProductWithInvalidSKU() {
        sku.setSkuCode("invalid"); // Invalid SKU format
        product.getSkus().add(sku);

        assertThrows(InvalidSKUException.class, () -> {
            productService.createProduct(product);
        });

        verify(productRepository, never()).save(any(Product.class));
    }

    @Test
    public void testGetProductById() {
        when(productRepository.findById(1L)).thenReturn(Optional.of(product));

        Optional<Product> foundProduct = productService.getProductById(1L);

        assertTrue(foundProduct.isPresent());
        assertEquals(1L, foundProduct.get().getId());
        verify(productRepository, times(1)).findById(1L);
    }

    @Test
    public void testGetAllProducts() {
        Product product2 = new Product();
        product2.setId(2L);
        product2.setName("Test Product 2");
        product2.setCategory("FASHION");

        when(productRepository.findAll()).thenReturn(Arrays.asList(product, product2));

        List<Product> products = productService.getAllProducts();

        assertEquals(2, products.size());
        verify(productRepository, times(1)).findAll();
    }

    @Test
    public void testGetProductsByCategory() {
        when(productRepository.findByCategory("CANDY")).thenReturn(Arrays.asList(product));

        List<Product> products = productService.getProductsByCategory("CANDY");

        assertEquals(1, products.size());
        assertEquals("CANDY", products.get(0).getCategory());
        verify(productRepository, times(1)).findByCategory("CANDY");
    }

    @Test
    public void testUpdateProduct() {
        when(productRepository.existsById(1L)).thenReturn(true);
        when(productRepository.save(any(Product.class))).thenReturn(product);

        Product updatedProduct = productService.updateProduct(product);

        assertNotNull(updatedProduct);
        assertEquals(1L, updatedProduct.getId());
        verify(productRepository, times(1)).existsById(1L);
        verify(productRepository, times(1)).save(product);
    }

    @Test
    public void testDeactivateProduct() {
        when(productRepository.findById(1L)).thenReturn(Optional.of(product));
        when(productRepository.save(any(Product.class))).thenReturn(product);

        productService.deactivateProduct(1L);

        assertFalse(product.isActive());
        verify(productRepository, times(1)).findById(1L);
        verify(productRepository, times(1)).save(product);
    }
}